generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../db/klbotDB.db"
}

// OK
model Player {
  id                              Int                               @id @default(autoincrement())
  username                        String                            @unique(map: "sqlite_autoindex_Player_1")
  profilePicturePath              String                            @unique(map: "sqlite_autoindex_Player_2")
  actualRank                      String
  phoneNumber                     String                            @unique(map: "sqlite_autoindex_Player_3")
  whatsappNickName                String
  role                            String
  joined_date                     BigInt                            @default(-1)
  Role                            Role                              @relation(fields: [role], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Rank                            Rank                              @relation(fields: [actualRank], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TournamentMatches               TournamentMatch[]
  TournamentPlayed_Players        MatchPlayed_Player[]
  ScheduledMatch_Players          ScheduledMatch_Player[]
  tournamentId                    Int?
  Tournament_Player_Subscriptions Tournament_Player_Subscriptions[]
}

// OK
model Rank {
  id                             String                          @unique(map: "sqlite_autoindex_Rank_1")
  name                           String                          @unique(map: "sqlite_autoindex_Rank_2")
  logoImagePath                  String                          @unique(map: "sqlite_autoindex_Rank_3")
  Players                        Player[]
  Tournament_Rank_RanksAdmitteds Tournament_Rank_RanksAdmitted[]
}

model Role {
  id      String   @id
  name    String   @unique(map: "sqlite_autoindex_Role_2")
  Players Player[]
}

// OK
model Tournament {
  id              Int     @id @default(autoincrement())
  name            String  @unique(map: "sqlite_autoindex_Tournament_1")
  description     String
  creationDate    BigInt
  beginDate       BigInt?
  matchPeriodTime Int
  endDate         BigInt?
  cover_img_name  String?
  tournament_type String
  max_players     Int
  match_format    String

  // I should normalize this...
  custom_players_per_team Int @default(-1)
  // end

  MatchFormat                     MatchType                         @relation(fields: [match_format], references: [id])
  TournamentType                  TournamentType                    @relation(fields: [tournament_type], references: [id])
  TournamentMatches               TournamentMatch[]
  ScheduledMatchWindows           ScheduledMatchWindow[]
  Tournament_Rank_RanksAdmitteds  Tournament_Rank_RanksAdmitted[]
  Tournament_Player_Subscriptions Tournament_Player_Subscriptions[]
}

model Tournament_Player_Subscriptions {
  tournament_id     Int
  player_id         Int
  subscription_date BigInt
  Tournament        Tournament @relation(fields: [tournament_id], references: [id], onDelete: Cascade)
  Player            Player     @relation(fields: [player_id], references: [id], onDelete: Cascade)

  @@id([tournament_id, player_id])
}

// OK
model Tournament_Rank_RanksAdmitted {
  tournament_id Int
  rank_id       String
  Tournament    Tournament @relation(fields: [tournament_id], references: [id], onDelete: Cascade)
  Rank          Rank       @relation(fields: [rank_id], references: [id], onDelete: Cascade)

  @@id([tournament_id, rank_id])
}

// OK
model MatchType {
  id               String           @id
  name             String
  players_per_team Int              @default(-1)
  ScheduledMatches ScheduledMatch[]
  MatchesPlayed    MatchPlayed[]
  Tournament       Tournament[]
}

//---------------------------Inheritance #1 "Match"---------------------------------------
// Father table | Inheritance
//**
// * This doesn't belong to a generic match nor a tournament match, it's abstract in what they have in common
//* model Match {
// * match_type: String
//* MatchType MatchType @relation(fields:[match_type], references:[id])
//* }
//*/

// Inheritance (Copying attributes) from abstract "Match"
// It's a pending/future matched planned, depends on ScheduledMatchWindow and for tournament planning (For tournaments, so it's no generic)
model ScheduledMatch {
  // Inherited
  match_type String
  MatchType  MatchType @relation(fields: [match_type], references: [id])

  // Own
  scheduled_match_window_id Int                     @id
  ScheduledMatchWindow      ScheduledMatchWindow    @relation(fields: [scheduled_match_window_id], references: [id], onDelete: Cascade)
  ScheduledMatch_Players    ScheduledMatch_Player[]
}

model ScheduledMatchWindow {
  id            Int    @id @default(autoincrement())
  tournament_id Int
  starting_date BigInt
  ending_date   BigInt

  Tournament       Tournament       @relation(fields: [tournament_id], references: [id], onDelete: Cascade)
  ScheduledMatches ScheduledMatch[]
}

// Its relation M:N with player table
model ScheduledMatch_Player {
  scheduled_match_id Int    @id
  player_id          Int
  team_color_id      String

  Player         Player         @relation(fields: [player_id], references: [id])
  ScheduledMatch ScheduledMatch @relation(fields: [scheduled_match_id], references: [scheduled_match_window_id], onDelete: Cascade)
  TeamColor      TeamColor      @relation(fields: [team_color_id], references: [id])
}

// Inheritance (Copying attributes) from abstract "Match"
// It its a generic match info storing (Not belonging necesarily to a tournament) its very independent
model MatchPlayed {
  // Inherited
  match_type String
  MatchType  MatchType @relation(fields: [match_type], references: [id])

  // Own
  date_played         BigInt               @id
  blue_scoreboard     Int
  orange_scoreboard   Int
  MatchPlayed_Players MatchPlayed_Player[]
  TournamentMatches   TournamentMatch[]
}

// Inheritance from ScheduledMatch_Player
model MatchPlayed_Player {
  match_played_date_id BigInt      @id
  player_id            Int
  Player               Player      @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Match                MatchPlayed @relation(fields: [match_played_date_id], references: [date_played], onDelete: NoAction, onUpdate: NoAction)

  // OwnProps
  is_winner         Boolean
  team_color_winner String
  TeamColor         TeamColor @relation(fields: [team_color_winner], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// Child table  OK
// Inheritance (Normalized and referencing to father ID, with no copying anything) from "MatchPlayed"
model TournamentMatch {
  match_date_id    BigInt @id // Foreign and primary key at the same time
  tournament_id    Int
  referee_verifier Int
  results_img_name String // New...added

  Match           MatchPlayed @relation(fields: [match_date_id], references: [date_played], onDelete: Cascade)
  RefereeVerifier Player      @relation(fields: [referee_verifier], references: [id], onDelete: NoAction)
  Tournament      Tournament  @relation(fields: [tournament_id], references: [id], onDelete: Cascade)
}

//------------------------------------------------------------------
// OK
model TeamColor {
  id                      String                  @id
  name                    String
  TournamentMatch_Players MatchPlayed_Player[]
  ScheduledMatch_Player   ScheduledMatch_Player[]
}

// OK
// AloneTable
model RegisteredWhatsappGroups {
  chat_id         String @id @unique
  group_name      String
  date_registered BigInt @unique
}

// OK
model TournamentType {
  id          String       @id @unique
  name        String
  Tournaments Tournament[]
}
